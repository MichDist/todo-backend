{"version":3,"sources":["components/Subtask.js","components/Task.js","services/tasks.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Subtask","task","undefined","subtasks","map","subtask","key","id","content","Task","toggleImportance","onDelete","onUpdate","updatedTask","handleUpdatedTask","label","important","onClick","window","confirm","onSubmit","className","value","onChange","type","baseURL","axios","get","then","response","data","newObject","post","put","delete","Notification","message","App","useState","tasksState","setTasksState","newTask","setNewTask","showAll","setShowAll","filter","setFilter","errorMessage","setErrorMessage","setUpdatedTask","useEffect","taskService","initialTasks","handleDelete","newTasks","updateTask","find","n","changedTask","returnedTask","event","console","log","target","tasksToShow","toLowerCase","includes","toggleImportanceOf","catch","error","setTimeout","preventDefault","newTaskObject","date","Date","toISOString","Math","random","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7eb176f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Subtask = ({task}) => {\r\nif(task.subtasks !== undefined) {\r\n  return (\r\n    task.subtasks.map(subtask => <li key={subtask.id}>{subtask.content}</li>)\r\n  )\r\n}\r\nelse {\r\n  return (null);\r\n}\r\n}\r\n\r\nexport default Subtask;\r\n","import React from 'react';\r\nimport Subtask from './Subtask';\r\n//import '../App.css';\r\n\r\nconst Task = ({task, toggleImportance, onDelete, onUpdate, updatedTask, handleUpdatedTask}) => {\r\n    // Importance\r\n    const label = task.important \r\n    ? 'make not important' : 'make important'\r\n\r\n    // Confirm delete\r\n    const handleConfirmDelete = (id, content) => {\r\n        if(window.confirm(`Do you really want to delete the task \"${content}\"?`)) {\r\n            onDelete(id)\r\n        }\r\n        else {return}\r\n    }\r\n\r\n    // Update \r\n    const handleOnUpdate = (id) => {\r\n        onUpdate(id)\r\n    }\r\n\r\n    // Todo for later: Move Update in another component\r\n    return (\r\n        <li key={task.id}>{task.content}\r\n        <button onClick={toggleImportance}>{label}</button>\r\n        <button onClick={() => handleConfirmDelete(task.id, task.content)}>Delete</button> \r\n        <form onSubmit={() => handleOnUpdate(task.id)}>\r\n            <input   \r\n            className=\"updateInput\"\r\n            value={updatedTask}\r\n            onChange={handleUpdatedTask}/>\r\n            <button type=\"submit\">Update task</button>\r\n        </form>\r\n        <ul>{<Subtask task={task} />}</ul>\r\n        </li>\r\n       )\r\n  }\r\n\r\n  export default Task;","import axios from 'axios'\r\nconst baseURL = 'http://localhost:3001/api/tasks'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseURL)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseURL, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseURL}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n    const request = axios.delete(`${baseURL}/${id}`)\r\n    return request\r\n}\r\n\r\n// Key: Variables = Functions here\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    remove: remove\r\n}","import React from 'react';\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import './App.css';\n//import ReactDOM from 'react-dom';\nimport React, { useState, useEffect } from 'react';\nimport Task from './components/Task'\nimport taskService from './services/tasks'\nimport Notification from './components/Notification'\n\n// TODO\n// CREATE SUBTASKS + DELETE + UPDATE\n\nconst App = () => {\n  // State Hooks\n  const [tasksState, setTasksState] = useState([])\n  const [newTask, setNewTask] = useState('Some new task')\n  const [showAll, setShowAll] = useState(true)\n  const [filter, setFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [updatedTask, setUpdatedTask] = useState('')\n\n\n  useEffect(() => {                           // useEffect(hook, [])\n    taskService\n      .getAll()\n      .then(initialTasks => {                     // Event Handler\n        setTasksState(initialTasks)\n      })\n  }, [])\n\n  // Adding new tasks\n  const addTask = (event) => {\n    event.preventDefault();\n    const newTaskObject = {\n      content: newTask,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    taskService\n      .create(newTaskObject)\n      .then(returnedTask => {\n        setTasksState(tasksState.concat(returnedTask))\n        setNewTask('')\n      })\n    }\n\n  const handleNewTask = (event) => {\n    console.log(event.target.value)\n    setNewTask(event.target.value)\n  }\n\n  // Search\n  const handleSearch = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  // Delete task\n  const handleDelete = (id) => {\n    taskService\n      .remove(id)\n      .then(() => {\n        const newTasks = tasksState.filter(task => task.id !== id)\n        setTasksState(newTasks)\n      })\n  }\n\n  // Update a task\n  const updateTask = (id, content) => {\n    //event.preventDefault()\n    const task = tasksState.find(n => n.id === id)\n    const changedTask = {...task, content: updatedTask}\n\n    taskService\n      .update(id, changedTask)\n      .then(returnedTask => {\n        setTasksState(returnedTask)\n      })\n  }\n\n  const handleUpdatedTask = (event) => {\n    console.log(event.target.value)\n    setUpdatedTask(event.target.value)\n  }\n\n  // Display tasks\n  const tasksToShow = showAll\n  // Show all and allow searching\n  ? tasksState.filter(task => task.content.toLowerCase().includes(filter.toLowerCase())).map(task => \n    <Task task={task} toggleImportance={() => toggleImportanceOf(task.id)} onDelete={handleDelete} onUpdate={updateTask} updatedTask={updatedTask} handleUpdatedTask={handleUpdatedTask}/>)\n  // Show only important and allow searching\n  : tasksState.filter(task => task.content.toLowerCase().includes(filter.toLowerCase())).filter(task => task.important).map(task => \n    <Task task={task} toggleImportance={() => toggleImportanceOf(task.id)} onDelete={handleDelete} onUpdate={updateTask} updatedTask={updatedTask} handleUpdatedTask={handleUpdatedTask}/>)\n\n  const showTasks = () => tasksToShow\n\n  const toggleImportanceOf = id => {\n    const task = tasksState.find(n => n.id === id)\n    const changedTask = { ...task, important: !task.important}\n\n  taskService\n    .update(id, changedTask)\n    .then(returnedTask => {\n      setTasksState(returnedTask)\n    })\n    // Catch error when user tries to make a non existing task (not) important\n    .catch(error => {\n      setErrorMessage(\n        `The Task '${task.content}' is not on the server!`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      // Filter the taks out from state\n      setTasksState(tasksState.filter(n => n.id !== id))\n    })\n  }\n\n\n  return (\n    <div className='App'>\n      <h1>Tasks</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {showTasks()}\n      </ul>\n      <form onSubmit={addTask}>\n        <input \n          value={newTask}\n          onChange={handleNewTask}/>\n        <button type=\"submit\">Save new task</button>\n      </form>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? 'only important tasks' : 'all tasks'}\n        </button>\n      </div>\n        {/* Search */}        \n      <div>\n        <input \n        onChange={handleSearch}/> \n      </div>\n    </div>\n    )\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}